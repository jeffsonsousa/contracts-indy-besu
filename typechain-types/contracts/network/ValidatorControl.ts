/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ValidatorControl {
  export type InitialValidatorInfoStruct = {
    validator: AddressLike;
    account: AddressLike;
  };

  export type InitialValidatorInfoStructOutput = [
    validator: string,
    account: string
  ] & { validator: string; account: string };
}

export interface ValidatorControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addValidator"
      | "getValidators"
      | "initialize"
      | "proxiableUUID"
      | "removeValidator"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Upgraded"
      | "ValidatorAdded"
      | "ValidatorRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      ValidatorControl.InitialValidatorInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [
    validator: AddressLike,
    byAccount: AddressLike,
    numValidators: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    byAccount: string,
    numValidators: bigint
  ];
  export interface OutputObject {
    validator: string;
    byAccount: string;
    numValidators: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [
    validator: AddressLike,
    byAccount: AddressLike,
    numValidators: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    byAccount: string,
    numValidators: bigint
  ];
  export interface OutputObject {
    validator: string;
    byAccount: string;
    numValidators: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValidatorControl extends BaseContract {
  connect(runner?: ContractRunner | null): ValidatorControl;
  waitForDeployment(): Promise<this>;

  interface: ValidatorControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addValidator: TypedContractMethod<
    [newValidator: AddressLike],
    [void],
    "nonpayable"
  >;

  getValidators: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<
    [
      roleControlContractAddress: AddressLike,
      upgradeControlAddress: AddressLike,
      initialValidators: ValidatorControl.InitialValidatorInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[newValidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      roleControlContractAddress: AddressLike,
      upgradeControlAddress: AddressLike,
      initialValidators: ValidatorControl.InitialValidatorInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "ValidatorAdded(address,address,uint8)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address,address,uint8)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
  };
}
