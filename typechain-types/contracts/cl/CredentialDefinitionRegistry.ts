/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type CredentialDefinitionStruct = {
  id: string;
  issuerId: string;
  schemaId: string;
  credDefType: string;
  tag: string;
  value: string;
};

export type CredentialDefinitionStructOutput = [
  id: string,
  issuerId: string,
  schemaId: string,
  credDefType: string,
  tag: string,
  value: string
] & {
  id: string;
  issuerId: string;
  schemaId: string;
  credDefType: string;
  tag: string;
  value: string;
};

export type CredentialDefinitionMetadataStruct = { created: BigNumberish };

export type CredentialDefinitionMetadataStructOutput = [created: bigint] & {
  created: bigint;
};

export type CredentialDefinitionWithMetadataStruct = {
  credDef: CredentialDefinitionStruct;
  metadata: CredentialDefinitionMetadataStruct;
};

export type CredentialDefinitionWithMetadataStructOutput = [
  credDef: CredentialDefinitionStructOutput,
  metadata: CredentialDefinitionMetadataStructOutput
] & {
  credDef: CredentialDefinitionStructOutput;
  metadata: CredentialDefinitionMetadataStructOutput;
};

export interface CredentialDefinitionRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "createCredentialDefinition"
      | "initialize"
      | "proxiableUUID"
      | "resolveCredentialDefinition"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialDefinitionCreated"
      | "Initialized"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCredentialDefinition",
    values: [CredentialDefinitionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveCredentialDefinition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCredentialDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveCredentialDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace CredentialDefinitionCreatedEvent {
  export type InputTuple = [
    credentialDefinitionId: string,
    sender: AddressLike
  ];
  export type OutputTuple = [credentialDefinitionId: string, sender: string];
  export interface OutputObject {
    credentialDefinitionId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CredentialDefinitionRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CredentialDefinitionRegistry;
  waitForDeployment(): Promise<this>;

  interface: CredentialDefinitionRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  createCredentialDefinition: TypedContractMethod<
    [credDef: CredentialDefinitionStruct],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      upgradeControlAddress: AddressLike,
      didResolverAddress: AddressLike,
      schemaRegistryAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  resolveCredentialDefinition: TypedContractMethod<
    [id: string],
    [CredentialDefinitionWithMetadataStructOutput],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createCredentialDefinition"
  ): TypedContractMethod<
    [credDef: CredentialDefinitionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      upgradeControlAddress: AddressLike,
      didResolverAddress: AddressLike,
      schemaRegistryAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resolveCredentialDefinition"
  ): TypedContractMethod<
    [id: string],
    [CredentialDefinitionWithMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "CredentialDefinitionCreated"
  ): TypedContractEvent<
    CredentialDefinitionCreatedEvent.InputTuple,
    CredentialDefinitionCreatedEvent.OutputTuple,
    CredentialDefinitionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CredentialDefinitionCreated(string,address)": TypedContractEvent<
      CredentialDefinitionCreatedEvent.InputTuple,
      CredentialDefinitionCreatedEvent.OutputTuple,
      CredentialDefinitionCreatedEvent.OutputObject
    >;
    CredentialDefinitionCreated: TypedContractEvent<
      CredentialDefinitionCreatedEvent.InputTuple,
      CredentialDefinitionCreatedEvent.OutputTuple,
      CredentialDefinitionCreatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
