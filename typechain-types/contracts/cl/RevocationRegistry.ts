/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type RevocationRegEntryStruct = {
  revDefId: string;
  regDefType: string;
  entry: string;
  issuerId: string;
};

export type RevocationRegEntryStructOutput = [
  revDefId: string,
  regDefType: string,
  entry: string,
  issuerId: string
] & { revDefId: string; regDefType: string; entry: string; issuerId: string };

export type RevocationStruct = {
  id: string;
  issuerId: string;
  credDefId: string;
};

export type RevocationStructOutput = [
  id: string,
  issuerId: string,
  credDefId: string
] & { id: string; issuerId: string; credDefId: string };

export type RevocationRegStruct = {
  ver: string;
  id: string;
  revocDefType: string;
  credDefId: string;
  tag: string;
  value: string;
  issuerId: string;
};

export type RevocationRegStructOutput = [
  ver: string,
  id: string,
  revocDefType: string,
  credDefId: string,
  tag: string,
  value: string,
  issuerId: string
] & {
  ver: string;
  id: string;
  revocDefType: string;
  credDefId: string;
  tag: string;
  value: string;
  issuerId: string;
};

export type RevocationEntryMetadataStruct = {
  created: BigNumberish;
  creator: AddressLike;
  updated: BigNumberish;
};

export type RevocationEntryMetadataStructOutput = [
  created: bigint,
  creator: string,
  updated: bigint
] & { created: bigint; creator: string; updated: bigint };

export type RevocationEntryWithMetadataStruct = {
  revEntry: RevocationRegEntryStruct;
  metadata: RevocationEntryMetadataStruct;
};

export type RevocationEntryWithMetadataStructOutput = [
  revEntry: RevocationRegEntryStructOutput,
  metadata: RevocationEntryMetadataStructOutput
] & {
  revEntry: RevocationRegEntryStructOutput;
  metadata: RevocationEntryMetadataStructOutput;
};

export type RevocationRegMetadataStruct = {
  created: BigNumberish;
  creator: AddressLike;
  updated: BigNumberish;
};

export type RevocationRegMetadataStructOutput = [
  created: bigint,
  creator: string,
  updated: bigint
] & { created: bigint; creator: string; updated: bigint };

export type RevocationRegWithMetadataStruct = {
  revocationReg: RevocationRegStruct;
  metadata: RevocationRegMetadataStruct;
};

export type RevocationRegWithMetadataStructOutput = [
  revocationReg: RevocationRegStructOutput,
  metadata: RevocationRegMetadataStructOutput
] & {
  revocationReg: RevocationRegStructOutput;
  metadata: RevocationRegMetadataStructOutput;
};

export interface RevocationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "createOrUpdateEntry"
      | "createRevocation"
      | "createRevocationRegistry"
      | "initialize"
      | "proxiableUUID"
      | "resolveEntry"
      | "resolveRevocation"
      | "revokeCredential"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialRevoked"
      | "CredentialUnrevoked"
      | "Initialized"
      | "RevListCreated"
      | "RevocationCreated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrUpdateEntry",
    values: [RevocationRegEntryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRevocation",
    values: [RevocationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRevocationRegistry",
    values: [RevocationRegStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEntry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveRevocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrUpdateEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRevocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRevocationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveRevocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace CredentialRevokedEvent {
  export type InputTuple = [RevocationId: string, sender: AddressLike];
  export type OutputTuple = [RevocationId: string, sender: string];
  export interface OutputObject {
    RevocationId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialUnrevokedEvent {
  export type InputTuple = [RevocationId: string, sender: AddressLike];
  export type OutputTuple = [RevocationId: string, sender: string];
  export interface OutputObject {
    RevocationId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevListCreatedEvent {
  export type InputTuple = [RevRegId: string, sender: AddressLike];
  export type OutputTuple = [RevRegId: string, sender: string];
  export interface OutputObject {
    RevRegId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevocationCreatedEvent {
  export type InputTuple = [RevocationId: string, sender: AddressLike];
  export type OutputTuple = [RevocationId: string, sender: string];
  export interface OutputObject {
    RevocationId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RevocationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RevocationRegistry;
  waitForDeployment(): Promise<this>;

  interface: RevocationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  createOrUpdateEntry: TypedContractMethod<
    [revEntry: RevocationRegEntryStruct],
    [void],
    "nonpayable"
  >;

  createRevocation: TypedContractMethod<
    [_revocation: RevocationStruct],
    [void],
    "nonpayable"
  >;

  createRevocationRegistry: TypedContractMethod<
    [revRegistry: RevocationRegStruct],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      upgradeControlAddress: AddressLike,
      didResolverAddress: AddressLike,
      credDefRegistryAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  resolveEntry: TypedContractMethod<
    [id: string],
    [RevocationEntryWithMetadataStructOutput],
    "view"
  >;

  resolveRevocation: TypedContractMethod<
    [id: string],
    [RevocationRegWithMetadataStructOutput],
    "view"
  >;

  revokeCredential: TypedContractMethod<[id: string], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createOrUpdateEntry"
  ): TypedContractMethod<
    [revEntry: RevocationRegEntryStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRevocation"
  ): TypedContractMethod<[_revocation: RevocationStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRevocationRegistry"
  ): TypedContractMethod<
    [revRegistry: RevocationRegStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      upgradeControlAddress: AddressLike,
      didResolverAddress: AddressLike,
      credDefRegistryAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resolveEntry"
  ): TypedContractMethod<
    [id: string],
    [RevocationEntryWithMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "resolveRevocation"
  ): TypedContractMethod<
    [id: string],
    [RevocationRegWithMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeCredential"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "CredentialRevoked"
  ): TypedContractEvent<
    CredentialRevokedEvent.InputTuple,
    CredentialRevokedEvent.OutputTuple,
    CredentialRevokedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialUnrevoked"
  ): TypedContractEvent<
    CredentialUnrevokedEvent.InputTuple,
    CredentialUnrevokedEvent.OutputTuple,
    CredentialUnrevokedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RevListCreated"
  ): TypedContractEvent<
    RevListCreatedEvent.InputTuple,
    RevListCreatedEvent.OutputTuple,
    RevListCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RevocationCreated"
  ): TypedContractEvent<
    RevocationCreatedEvent.InputTuple,
    RevocationCreatedEvent.OutputTuple,
    RevocationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CredentialRevoked(string,address)": TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;
    CredentialRevoked: TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;

    "CredentialUnrevoked(string,address)": TypedContractEvent<
      CredentialUnrevokedEvent.InputTuple,
      CredentialUnrevokedEvent.OutputTuple,
      CredentialUnrevokedEvent.OutputObject
    >;
    CredentialUnrevoked: TypedContractEvent<
      CredentialUnrevokedEvent.InputTuple,
      CredentialUnrevokedEvent.OutputTuple,
      CredentialUnrevokedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RevListCreated(string,address)": TypedContractEvent<
      RevListCreatedEvent.InputTuple,
      RevListCreatedEvent.OutputTuple,
      RevListCreatedEvent.OutputObject
    >;
    RevListCreated: TypedContractEvent<
      RevListCreatedEvent.InputTuple,
      RevListCreatedEvent.OutputTuple,
      RevListCreatedEvent.OutputObject
    >;

    "RevocationCreated(string,address)": TypedContractEvent<
      RevocationCreatedEvent.InputTuple,
      RevocationCreatedEvent.OutputTuple,
      RevocationCreatedEvent.OutputObject
    >;
    RevocationCreated: TypedContractEvent<
      RevocationCreatedEvent.InputTuple,
      RevocationCreatedEvent.OutputTuple,
      RevocationCreatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
