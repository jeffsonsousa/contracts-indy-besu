/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "AccountControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountControl__factory>;
    getContractFactory(
      name: "AccountControlInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountControlInterface__factory>;
    getContractFactory(
      name: "RoleControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleControl__factory>;
    getContractFactory(
      name: "RoleControlInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleControlInterface__factory>;
    getContractFactory(
      name: "CredentialDefinitionRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialDefinitionRegistry__factory>;
    getContractFactory(
      name: "CredentialDefinitionRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CredentialDefinitionRegistryInterface__factory>;
    getContractFactory(
      name: "RevocationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevocationRegistry__factory>;
    getContractFactory(
      name: "RevocationRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevocationRegistryInterface__factory>;
    getContractFactory(
      name: "SchemaRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SchemaRegistry__factory>;
    getContractFactory(
      name: "SchemaRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SchemaRegistryInterface__factory>;
    getContractFactory(
      name: "EthereumExtDidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumExtDidRegistry__factory>;
    getContractFactory(
      name: "IndyDidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IndyDidRegistry__factory>;
    getContractFactory(
      name: "IndyDidRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IndyDidRegistryInterface__factory>;
    getContractFactory(
      name: "IndyDidValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IndyDidValidator__factory>;
    getContractFactory(
      name: "UniversalDidResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalDidResolver__factory>;
    getContractFactory(
      name: "UniversalDidResolverInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalDidResolverInterface__factory>;
    getContractFactory(
      name: "ValidatorControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorControl__factory>;
    getContractFactory(
      name: "ValidatorSmartContractInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorSmartContractInterface__factory>;
    getContractFactory(
      name: "NotUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NotUpgradable__factory>;
    getContractFactory(
      name: "SimpleContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleContract__factory>;
    getContractFactory(
      name: "UpgradablePrototypeV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradablePrototypeV1__factory>;
    getContractFactory(
      name: "UpgradablePrototypeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradablePrototypeV2__factory>;
    getContractFactory(
      name: "ControlledUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControlledUpgradeable__factory>;
    getContractFactory(
      name: "UpgradeControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeControl__factory>;
    getContractFactory(
      name: "UpgradeControlInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeControlInterface__factory>;
    getContractFactory(
      name: "EthereumDIDRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumDIDRegistry__factory>;

    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "AccountControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountControl>;
    getContractAt(
      name: "AccountControlInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountControlInterface>;
    getContractAt(
      name: "RoleControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleControl>;
    getContractAt(
      name: "RoleControlInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleControlInterface>;
    getContractAt(
      name: "CredentialDefinitionRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialDefinitionRegistry>;
    getContractAt(
      name: "CredentialDefinitionRegistryInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CredentialDefinitionRegistryInterface>;
    getContractAt(
      name: "RevocationRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevocationRegistry>;
    getContractAt(
      name: "RevocationRegistryInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevocationRegistryInterface>;
    getContractAt(
      name: "SchemaRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SchemaRegistry>;
    getContractAt(
      name: "SchemaRegistryInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SchemaRegistryInterface>;
    getContractAt(
      name: "EthereumExtDidRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumExtDidRegistry>;
    getContractAt(
      name: "IndyDidRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IndyDidRegistry>;
    getContractAt(
      name: "IndyDidRegistryInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IndyDidRegistryInterface>;
    getContractAt(
      name: "IndyDidValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IndyDidValidator>;
    getContractAt(
      name: "UniversalDidResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalDidResolver>;
    getContractAt(
      name: "UniversalDidResolverInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalDidResolverInterface>;
    getContractAt(
      name: "ValidatorControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorControl>;
    getContractAt(
      name: "ValidatorSmartContractInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorSmartContractInterface>;
    getContractAt(
      name: "NotUpgradable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NotUpgradable>;
    getContractAt(
      name: "SimpleContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleContract>;
    getContractAt(
      name: "UpgradablePrototypeV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradablePrototypeV1>;
    getContractAt(
      name: "UpgradablePrototypeV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradablePrototypeV2>;
    getContractAt(
      name: "ControlledUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ControlledUpgradeable>;
    getContractAt(
      name: "UpgradeControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeControl>;
    getContractAt(
      name: "UpgradeControlInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeControlInterface>;
    getContractAt(
      name: "EthereumDIDRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumDIDRegistry>;

    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "AccountControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountControl>;
    deployContract(
      name: "AccountControlInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountControlInterface>;
    deployContract(
      name: "RoleControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleControl>;
    deployContract(
      name: "RoleControlInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleControlInterface>;
    deployContract(
      name: "CredentialDefinitionRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialDefinitionRegistry>;
    deployContract(
      name: "CredentialDefinitionRegistryInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialDefinitionRegistryInterface>;
    deployContract(
      name: "RevocationRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationRegistry>;
    deployContract(
      name: "RevocationRegistryInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationRegistryInterface>;
    deployContract(
      name: "SchemaRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistry>;
    deployContract(
      name: "SchemaRegistryInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistryInterface>;
    deployContract(
      name: "EthereumExtDidRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumExtDidRegistry>;
    deployContract(
      name: "IndyDidRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidRegistry>;
    deployContract(
      name: "IndyDidRegistryInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidRegistryInterface>;
    deployContract(
      name: "IndyDidValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidValidator>;
    deployContract(
      name: "UniversalDidResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalDidResolver>;
    deployContract(
      name: "UniversalDidResolverInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalDidResolverInterface>;
    deployContract(
      name: "ValidatorControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorControl>;
    deployContract(
      name: "ValidatorSmartContractInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorSmartContractInterface>;
    deployContract(
      name: "NotUpgradable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotUpgradable>;
    deployContract(
      name: "SimpleContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleContract>;
    deployContract(
      name: "UpgradablePrototypeV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradablePrototypeV1>;
    deployContract(
      name: "UpgradablePrototypeV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradablePrototypeV2>;
    deployContract(
      name: "ControlledUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ControlledUpgradeable>;
    deployContract(
      name: "UpgradeControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeControl>;
    deployContract(
      name: "UpgradeControlInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeControlInterface>;
    deployContract(
      name: "EthereumDIDRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumDIDRegistry>;

    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "AccountControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountControl>;
    deployContract(
      name: "AccountControlInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountControlInterface>;
    deployContract(
      name: "RoleControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleControl>;
    deployContract(
      name: "RoleControlInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleControlInterface>;
    deployContract(
      name: "CredentialDefinitionRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialDefinitionRegistry>;
    deployContract(
      name: "CredentialDefinitionRegistryInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CredentialDefinitionRegistryInterface>;
    deployContract(
      name: "RevocationRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationRegistry>;
    deployContract(
      name: "RevocationRegistryInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationRegistryInterface>;
    deployContract(
      name: "SchemaRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistry>;
    deployContract(
      name: "SchemaRegistryInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistryInterface>;
    deployContract(
      name: "EthereumExtDidRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumExtDidRegistry>;
    deployContract(
      name: "IndyDidRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidRegistry>;
    deployContract(
      name: "IndyDidRegistryInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidRegistryInterface>;
    deployContract(
      name: "IndyDidValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IndyDidValidator>;
    deployContract(
      name: "UniversalDidResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalDidResolver>;
    deployContract(
      name: "UniversalDidResolverInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalDidResolverInterface>;
    deployContract(
      name: "ValidatorControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorControl>;
    deployContract(
      name: "ValidatorSmartContractInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorSmartContractInterface>;
    deployContract(
      name: "NotUpgradable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotUpgradable>;
    deployContract(
      name: "SimpleContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleContract>;
    deployContract(
      name: "UpgradablePrototypeV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradablePrototypeV1>;
    deployContract(
      name: "UpgradablePrototypeV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradablePrototypeV2>;
    deployContract(
      name: "ControlledUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ControlledUpgradeable>;
    deployContract(
      name: "UpgradeControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeControl>;
    deployContract(
      name: "UpgradeControlInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeControlInterface>;
    deployContract(
      name: "EthereumDIDRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumDIDRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
