/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UpgradeControlInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature: "approve" | "ensureSufficientApprovals" | "propose"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "UpgradeApproved" | "UpgradeProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureSufficientApprovals",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureSufficientApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
}

export namespace UpgradeApprovedEvent {
  export type InputTuple = [
    proxy: AddressLike,
    implementation: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    proxy: string,
    implementation: string,
    sender: string
  ];
  export interface OutputObject {
    proxy: string;
    implementation: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradeProposedEvent {
  export type InputTuple = [
    proxy: AddressLike,
    implementation: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    proxy: string,
    implementation: string,
    sender: string
  ];
  export interface OutputObject {
    proxy: string;
    implementation: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UpgradeControlInterface extends BaseContract {
  connect(runner?: ContractRunner | null): UpgradeControlInterface;
  waitForDeployment(): Promise<this>;

  interface: UpgradeControlInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  ensureSufficientApprovals: TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "view"
  >;

  propose: TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ensureSufficientApprovals"
  ): TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [proxy: AddressLike, implementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "UpgradeApproved"
  ): TypedContractEvent<
    UpgradeApprovedEvent.InputTuple,
    UpgradeApprovedEvent.OutputTuple,
    UpgradeApprovedEvent.OutputObject
  >;
  getEvent(
    key: "UpgradeProposed"
  ): TypedContractEvent<
    UpgradeProposedEvent.InputTuple,
    UpgradeProposedEvent.OutputTuple,
    UpgradeProposedEvent.OutputObject
  >;

  filters: {
    "UpgradeApproved(address,address,address)": TypedContractEvent<
      UpgradeApprovedEvent.InputTuple,
      UpgradeApprovedEvent.OutputTuple,
      UpgradeApprovedEvent.OutputObject
    >;
    UpgradeApproved: TypedContractEvent<
      UpgradeApprovedEvent.InputTuple,
      UpgradeApprovedEvent.OutputTuple,
      UpgradeApprovedEvent.OutputObject
    >;

    "UpgradeProposed(address,address,address)": TypedContractEvent<
      UpgradeProposedEvent.InputTuple,
      UpgradeProposedEvent.OutputTuple,
      UpgradeProposedEvent.OutputObject
    >;
    UpgradeProposed: TypedContractEvent<
      UpgradeProposedEvent.InputTuple,
      UpgradeProposedEvent.OutputTuple,
      UpgradeProposedEvent.OutputObject
    >;
  };
}
