/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type VerificationMethodStruct = {
  id: string;
  verificationMethodType: string;
  controller: string;
  publicKeyJwk: string;
  publicKeyMultibase: string;
};

export type VerificationMethodStructOutput = [
  id: string,
  verificationMethodType: string,
  controller: string,
  publicKeyJwk: string,
  publicKeyMultibase: string
] & {
  id: string;
  verificationMethodType: string;
  controller: string;
  publicKeyJwk: string;
  publicKeyMultibase: string;
};

export type VerificationRelationshipStruct = {
  id: string;
  verificationMethod: VerificationMethodStruct;
};

export type VerificationRelationshipStructOutput = [
  id: string,
  verificationMethod: VerificationMethodStructOutput
] & { id: string; verificationMethod: VerificationMethodStructOutput };

export type ServiceStruct = {
  id: string;
  serviceType: string;
  serviceEndpoint: string;
  accept: string[];
  routingKeys: string[];
};

export type ServiceStructOutput = [
  id: string,
  serviceType: string,
  serviceEndpoint: string,
  accept: string[],
  routingKeys: string[]
] & {
  id: string;
  serviceType: string;
  serviceEndpoint: string;
  accept: string[];
  routingKeys: string[];
};

export type DidDocumentStruct = {
  context: string[];
  id: string;
  controller: string[];
  verificationMethod: VerificationMethodStruct[];
  authentication: VerificationRelationshipStruct[];
  assertionMethod: VerificationRelationshipStruct[];
  capabilityInvocation: VerificationRelationshipStruct[];
  capabilityDelegation: VerificationRelationshipStruct[];
  keyAgreement: VerificationRelationshipStruct[];
  service: ServiceStruct[];
  alsoKnownAs: string[];
};

export type DidDocumentStructOutput = [
  context: string[],
  id: string,
  controller: string[],
  verificationMethod: VerificationMethodStructOutput[],
  authentication: VerificationRelationshipStructOutput[],
  assertionMethod: VerificationRelationshipStructOutput[],
  capabilityInvocation: VerificationRelationshipStructOutput[],
  capabilityDelegation: VerificationRelationshipStructOutput[],
  keyAgreement: VerificationRelationshipStructOutput[],
  service: ServiceStructOutput[],
  alsoKnownAs: string[]
] & {
  context: string[];
  id: string;
  controller: string[];
  verificationMethod: VerificationMethodStructOutput[];
  authentication: VerificationRelationshipStructOutput[];
  assertionMethod: VerificationRelationshipStructOutput[];
  capabilityInvocation: VerificationRelationshipStructOutput[];
  capabilityDelegation: VerificationRelationshipStructOutput[];
  keyAgreement: VerificationRelationshipStructOutput[];
  service: ServiceStructOutput[];
  alsoKnownAs: string[];
};

export interface IndyDidValidatorInterface extends Interface {
  getFunction(
    nameOrSignature: "validateDid" | "validateVerificationKey"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "validateDid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validateVerificationKey",
    values: [DidDocumentStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "validateDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateVerificationKey",
    data: BytesLike
  ): Result;
}

export interface IndyDidValidator extends BaseContract {
  connect(runner?: ContractRunner | null): IndyDidValidator;
  waitForDeployment(): Promise<this>;

  interface: IndyDidValidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  validateDid: TypedContractMethod<[did: string], [void], "view">;

  validateVerificationKey: TypedContractMethod<
    [didDocument: DidDocumentStruct],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "validateDid"
  ): TypedContractMethod<[did: string], [void], "view">;
  getFunction(
    nameOrSignature: "validateVerificationKey"
  ): TypedContractMethod<[didDocument: DidDocumentStruct], [void], "view">;

  filters: {};
}
